// Generated by CoffeeScript 1.10.0
(function() {
  var Fifo,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Fifo = (function() {
    Fifo.prototype.queueLimit = null;

    function Fifo(namespace) {
      var error1;
      if (namespace == null) {
        namespace = 'fifo';
      }
      this.empty = bind(this.empty, this);
      this.setQueueLimit = bind(this.setQueueLimit, this);
      this._removeByFunction = bind(this._removeByFunction, this);
      this._removeByRegExp = bind(this._removeByRegExp, this);
      this._removeByString = bind(this._removeByString, this);
      this.remove = bind(this.remove, this);
      this.has = bind(this.has, this);
      this.keys = bind(this.keys, this);
      this.setFixed = bind(this.setFixed, this);
      this.get = bind(this.get, this);
      this.set = bind(this.set, this);
      this.save = bind(this.save, this);
      this.removeFirstIn = bind(this.removeFirstIn, this);
      this.trySave = bind(this.trySave, this);
      this.namespace = namespace;
      this.noLS = false;
      try {
        if (typeof localStorage !== "undefined" && localStorage !== null) {
          this.data = JSON.parse(localStorage.getItem(this.namespace)) || {
            keys: [],
            items: {}
          };
        } else {
          this.data = {
            keys: [],
            items: {}
          };
          this.noLS = true;
        }
      } catch (error1) {
        this.data = {
          keys: [],
          items: {}
        };
        this.noLS = true;
      }
    }

    Fifo.prototype.trySave = function(key, value) {
      var error, error1;
      if (this.noLS) {
        return false;
      }
      try {
        if (!key) {
          if (this.queueLimit && (this.data.keys.length > this.queueLimit)) {
            return false;
          }
          localStorage.setItem(this.namespace, JSON.stringify(this.data));
        } else {
          localStorage.setItem(key, value);
        }
        return true;
      } catch (error1) {
        error = error1;
        if (error.code === 18 || error.code === 21 || error.code === 22 || error.code === 1014 || error.number === -2147024882) {
          return false;
        }
        throw error;
      }
    };

    Fifo.prototype.removeFirstIn = function() {
      var firstIn, removedItem;
      firstIn = this.data.keys.pop();
      removedItem = {
        key: firstIn,
        value: this.data.items[firstIn]
      };
      delete this.data.items[firstIn];
      return removedItem;
    };

    Fifo.prototype.save = function(key, value) {
      var removed;
      removed = [];
      if (this.noLS) {
        return removed;
      }
      while (!this.trySave(key, value)) {
        if (this.data.keys.length) {
          removed.push(this.removeFirstIn());
          if (!this.noLS) {
            if (key) {
              localStorage.setItem(this.namespace, JSON.stringify(this.data));
            }
          }
        } else {
          throw new Error("All items removed from " + this.namespace + ", still can't save.");
        }
      }
      return removed;
    };

    Fifo.prototype.set = function(key, value, onRemoved) {
      var index, removed;
      this.data.items[key] = value;
      index = this.data.keys.indexOf(key);
      if (index > -1) {
        this.data.keys.splice(index, 1);
      }
      this.data.keys.unshift(key);
      removed = this.save();
      if (onRemoved && removed.length) {
        onRemoved.call(this, removed);
      }
      return this;
    };

    Fifo.prototype.get = function(key) {
      var i, items, len, ref;
      if (key) {
        if (this.noLS) {
          return this.data.items[key];
        } else {
          return localStorage.getItem(key) || this.data.items[key];
        }
      } else {
        if (this.noLS) {
          return this.data.items;
        } else {
          items = this.data.items;
          ref = Object.keys(localStorage);
          for (i = 0, len = ref.length; i < len; i++) {
            key = ref[i];
            if (key !== this.namespace) {
              items[key] = localStorage.getItem(key);
            }
          }
          return items;
        }
      }
    };

    Fifo.prototype.setFixed = function(key, value, onRemoved) {
      var index, removed;
      if (this.noLS) {
        this.data.items[key] = value;
        index = this.data.keys.indexOf(key);
        if (index > -1) {
          this.data.keys.splice(index, 1);
        }
        this.data.keys.unshift(key);
      }
      removed = this.save(key, value);
      if (onRemoved && removed.length) {
        onRemoved.call(this, removed);
      }
      return this;
    };

    Fifo.prototype.keys = function() {
      var i, j, key, keys, len, len1, ref, ref1;
      keys = [];
      ref = this.data.keys;
      for (i = 0, len = ref.length; i < len; i++) {
        key = ref[i];
        keys.push(key);
      }
      if (this.noLS) {
        if (this.queueLimit) {
          keys.splice(-1 * this.queueLimit);
        }
        return keys;
      }
      ref1 = Object.keys(localStorage);
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        key = ref1[j];
        if (key !== this.namespace) {
          keys.push(key);
        }
      }
      return keys;
    };

    Fifo.prototype.has = function(key) {
      var keys;
      if (this.noLS) {
        if (this.queueLimit) {
          keys = this.data.keys.slice(0);
          keys.splice(-1 * this.queueLimit);
          if (-1 !== keys.indexOf(key)) {
            return true;
          } else {
            return false;
          }
        }
        if (-1 !== this.data.keys.indexOf(key)) {
          return true;
        } else {
          return false;
        }
      }
      if (-1 !== this.data.keys.indexOf(key)) {
        return true;
      }
      if (localStorage.getItem(key) !== null) {
        return true;
      }
      return false;
    };

    Fifo.prototype.remove = function(victim) {
      if (typeof victim === 'string') {
        return this._removeByString(victim);
      }
      if (victim instanceof RegExp) {
        return this._removeByRegExp(victim);
      }
      return this._removeByFunction(victim);
    };

    Fifo.prototype._removeByString = function(victim) {
      var i, index, len, ref, suspect;
      if (!this.noLS) {
        if (localStorage.getItem(victim)) {
          localStorage.removeItem(victim);
          return this;
        }
      }
      ref = this.data.keys;
      for (index = i = 0, len = ref.length; i < len; index = ++i) {
        suspect = ref[index];
        if (!(suspect === victim)) {
          continue;
        }
        this.data.keys.splice(index, 1);
        break;
      }
      delete this.data.items[victim];
      this.save();
      return this;
    };

    Fifo.prototype._removeByRegExp = function(victim) {
      var i, index, j, len, len1, ref, ref1, suspect;
      if (!this.noLS) {
        Object.keys(localStorage).forEach(function(suspect) {
          if (suspect.match(victim)) {
            return localStorage.removeItem(suspect);
          }
        });
      }
      ref = this.data.keys;
      for (index = i = 0, len = ref.length; i < len; index = ++i) {
        suspect = ref[index];
        if (!(suspect != null ? suspect.match(victim) : void 0)) {
          continue;
        }
        this.data.keys.splice(index, 1);
        delete this.data.items[suspect];
      }
      if (this.noLS) {
        ref1 = Object.keys(this.data.items);
        for (index = j = 0, len1 = ref1.length; j < len1; index = ++j) {
          suspect = ref1[index];
          if (!(suspect != null ? suspect.match(victim) : void 0)) {
            continue;
          }
          this.data.keys.splice(index, 1);
          delete this.data.items[suspect];
        }
      }
      this.save();
      return this;
    };

    Fifo.prototype._removeByFunction = function(victim) {
      var i, index, j, len, len1, ref, ref1, suspect;
      if (!this.noLS) {
        Object.keys(localStorage).forEach(function(suspect) {
          if (victim(suspect)) {
            return localStorage.removeItem(suspect);
          }
        });
      }
      ref = this.data.keys;
      for (index = i = 0, len = ref.length; i < len; index = ++i) {
        suspect = ref[index];
        if (!((suspect != null) && victim.call(this, suspect))) {
          continue;
        }
        this.data.keys.splice(index, 1);
        delete this.data.items[suspect];
      }
      if (this.noLS) {
        ref1 = Object.keys(this.data.items);
        for (index = j = 0, len1 = ref1.length; j < len1; index = ++j) {
          suspect = ref1[index];
          if (!((suspect != null) && victim.call(this, suspect))) {
            continue;
          }
          this.data.keys.splice(index, 1);
          delete this.data.items[suspect];
        }
      }
      this.save();
      return this;
    };

    Fifo.prototype.setQueueLimit = function(limit) {
      return this.queueLimit = limit;
    };

    Fifo.prototype.empty = function() {
      this.data = {
        keys: [],
        items: {}
      };
      this.save();
      return this;
    };

    return Fifo;

  })();

  (typeof exports !== "undefined" && exports !== null ? exports : this).Fifo = Fifo;

}).call(this);
